# -*- coding: utf-8 -*-

from behave import given, when, then
from hamcrest import assert_that, contains_string, equal_to

from isotopic_logging import prefix_injector


@when("I ask for prefix injector")
def step_impl(context):
    context.injector = prefix_injector(details=context.log_details)


@given("I don't care about prefix details")
def step_impl(context):
    context.log_details = None


@then("I should get a context with delimited autogenerated prefix")
def step_impl(context):
    """
    Expect that injected string has following format:

        <autogenerated value> | <original string>
    """
    with context.injector as inj:
        string = inj.mark("foo")
        assert_that(string, contains_string(" | "))


@given("I want to add some detailes to prefix")
def step_impl(context):
    context.log_details = "username=admin"


@then("I should get a context with delimited autogenerated prefix containing "
      "details")
def step_impl(context):
    """
    Expect that injected string has following format:

        <autogenerated value> | <details> | <original string>
    """
    with context.injector as inj:
        string = inj.mark("foo")
        assert_that(string, contains_string(context.log_details))

        details = string.split(' | ', 2)[1]
        assert_that(details, equal_to(context.log_details))
